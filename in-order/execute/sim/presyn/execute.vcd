$date
	Mon May 15 21:27:53 2023
$end

$version
	Synopsys VCS version T-2022.06_Full64
$end

$timescale
	10ps
$end

$comment Csum: 1 a831b0b3e74667b9 $end


$scope module execute_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # rf_w_en_i $end
$var reg 1 $ mem_w_en_i $end
$var reg 2 % opsel1 [1:0] $end
$var reg 2 & opsel2 [1:0] $end
$var reg 4 ' alu_func [3:0] $end
$var reg 32 ( rs1_data_i [31:0] $end
$var reg 32 ) rs2_data_i [31:0] $end
$var reg 32 * imm [31:0] $end
$var reg 32 + pc_i [31:0] $end
$var reg 5 , rd_addr_i [4:0] $end
$var reg 2 - wbsel_i [1:0] $end
$var reg 32 . pc_o [31:0] $end
$var reg 32 / alu_out [31:0] $end
$var reg 5 0 rd_addr_o [4:0] $end
$var reg 1 1 rf_w_en_o $end
$var reg 2 2 wbsel_o [1:0] $end
$var reg 1 3 mem_w_en_o $end
$var reg 32 4 rs2_data_o [31:0] $end

$scope module execute0 $end
$var wire 1 5 clk $end
$var wire 1 6 reset $end
$var wire 2 7 opsel1 [1:0] $end
$var wire 2 8 opsel2 [1:0] $end
$var wire 4 9 alu_func [3:0] $end
$var wire 32 : rs1_data_i [31:0] $end
$var wire 32 ; rs2_data_i [31:0] $end
$var wire 32 < imm [31:0] $end
$var wire 32 = pc_i [31:0] $end
$var wire 5 > rd_addr_i [4:0] $end
$var wire 1 ? rf_w_en_i $end
$var wire 2 @ wbsel_i [1:0] $end
$var wire 1 A mem_w_en_i $end
$var reg 32 B pc_o [31:0] $end
$var reg 32 C alu_out [31:0] $end
$var reg 5 D rd_addr_o [4:0] $end
$var reg 1 E rf_w_en_o $end
$var reg 2 F wbsel_o [1:0] $end
$var reg 1 G mem_w_en_o $end
$var reg 32 H rs2_data_o [31:0] $end
$var reg 32 I alu_op1 [31:0] $end
$var reg 32 J alu_op2 [31:0] $end
$var wire 32 K alu_out_temp [31:0] $end

$scope module alu0 $end
$var wire 32 L alu_op1 [31:0] $end
$var wire 32 M alu_op2 [31:0] $end
$var wire 4 9 alu_func [3:0] $end
$var reg 32 N alu_out [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
0!
xA
xG
06
x?
xE
x$
x3
0"
x#
x1
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b0001 '
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
b00000000000000000000000000000000 K
b0001 9
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx C
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx <
b00 7
b00 8
b00000000000000000000000000000001 =
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx B
bxxxxx >
bxxxxx D
b00000000000000000000000000000100 :
b00000000000000000000000000000010 ;
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx H
bxx @
bxx F
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx *
b00 %
b00 &
b00000000000000000000000000000001 +
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .
bxxxxx ,
bxxxxx 0
b00000000000000000000000000000100 (
b00000000000000000000000000000010 )
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 4
bxx -
bxx 2
05
$end
#500
1!
15
b00000000000000000000000000000001 B
b00000000000000000000000000000001 .
b00000000000000000000000000000000 C
b00000000000000000000000000000000 /
b00000000000000000000000000000010 H
b00000000000000000000000000000010 4
#1000
b00000000000000000000000000000110 )
b00000000000000000000000000000110 ;
b00000000000000000000000000000010 +
b00000000000000000000000000000010 =
0!
05
#1500
1!
15
b00000000000000000000000000000010 B
b00000000000000000000000000000010 .
b00000000000000000000000000000110 H
b00000000000000000000000000000110 4
#2000
b00000000000000000000000000001110 (
b00000000000000000000000000001110 :
b00000000000000000000000000010110 )
b00000000000000000000000000010110 ;
b00000000000000000000000000000100 +
b00000000000000000000000000000100 =
0!
05
#2500
1!
15
b00000000000000000000000000000100 B
b00000000000000000000000000000100 .
b00000000000000000000000000010110 H
b00000000000000000000000000010110 4
#3000
b00000000000000000000000000001010 (
b00000000000000000000000000001010 :
b00000000000000000000000000110110 )
b00000000000000000000000000110110 ;
b00000000000000000000000000001000 +
b00000000000000000000000000001000 =
0!
05
#3500
1!
15
b00000000000000000000000000001000 B
b00000000000000000000000000001000 .
b00000000000000000000000000110110 H
b00000000000000000000000000110110 4
